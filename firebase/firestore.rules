rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isConsultant() {
      return hasRole('consultant');
    }
    
    function isClient() {
      return hasRole('client');
    }
    
    function isAdmin() {
      return hasRole('admin');
    }

    function isApprovedUser() {
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return (userData.isApproved == true && userData.status == 'active') || isAdmin();
    }

    // User profiles
    match /users/{userId} {
      // Anyone can read basic profile info, admins can read all
      allow read: if isAuthenticated() || isAdmin();
      // Only the owner can create their profile
      allow create: if isOwner(userId);
      // Owner can update their profile, admin can update any profile
      allow update: if isOwner(userId) || isAdmin();
      // Only admin can delete
      allow delete: if isAdmin();
    }
    
    // Consultant profiles (public information)
    match /consultants/{consultantId} {
      // Anyone can read consultant profiles
      allow read: if isAuthenticated();
      // Only the consultant can create/update their profile
      allow create, update: if isOwner(consultantId) && (isConsultant() || isAdmin());
      allow delete: if isAdmin();
    }

    // Consultations
    match /consultations/{consultationId} {
      // Both client and consultant can read their consultations, admin can read all
      allow read: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        resource.data.consultantId == request.auth.uid ||
        isAdmin()
      );
      // Clients can create consultations, admin can create for anyone
      allow create: if (isClient() && request.resource.data.clientId == request.auth.uid) || isAdmin();
      // Both parties can update the consultation, admin can update any
      allow update: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        resource.data.consultantId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Appointments
    match /appointments/{appointmentId} {
      // Both client and consultant can read their appointments, admin can read all
      allow read: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid || 
        resource.data.consultantId == request.auth.uid ||
        isAdmin()
      );
      // Clients can create appointments, admin can create for anyone
      allow create: if isClient() && request.resource.data.clientId == request.auth.uid || isAdmin();
      // Both parties can update the appointment, admin can update any
      allow update: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid || 
        resource.data.consultantId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Reviews
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if isAuthenticated();
      // Only clients who had an appointment can create reviews, admin can create for anyone
      allow create: if isAdmin() || (
        isClient() && 
        exists(/databases/$(database)/documents/appointments/$(request.resource.data.appointmentId)) &&
        get(/databases/$(database)/documents/appointments/$(request.resource.data.appointmentId)).data.clientId == request.auth.uid
      );
      // Only the review author can update, admin can update any
      allow update: if isOwner(resource.data.authorId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Stripe customer data
    match /customers/{customerId} {
      allow read: if isOwner(customerId) || isAdmin();
      allow write: if isAdmin();
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
  }
}
